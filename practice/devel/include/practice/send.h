// Generated by gencpp from file practice/send.msg
// DO NOT EDIT!


#ifndef PRACTICE_MESSAGE_SEND_H
#define PRACTICE_MESSAGE_SEND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace practice
{
template <class ContainerAllocator>
struct send_
{
  typedef send_<ContainerAllocator> Type;

  send_()
    : message1()
    , message2()  {
    }
  send_(const ContainerAllocator& _alloc)
    : message1(_alloc)
    , message2(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message1_type;
  _message1_type message1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message2_type;
  _message2_type message2;





  typedef boost::shared_ptr< ::practice::send_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::practice::send_<ContainerAllocator> const> ConstPtr;

}; // struct send_

typedef ::practice::send_<std::allocator<void> > send;

typedef boost::shared_ptr< ::practice::send > sendPtr;
typedef boost::shared_ptr< ::practice::send const> sendConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::practice::send_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::practice::send_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace practice

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'practice': ['/home/jkb/practice/src/practice/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::practice::send_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::practice::send_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::practice::send_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::practice::send_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::practice::send_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::practice::send_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::practice::send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5eba6f8f31d161a30d781af191db38e0";
  }

  static const char* value(const ::practice::send_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5eba6f8f31d161a3ULL;
  static const uint64_t static_value2 = 0x0d781af191db38e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::practice::send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "practice/send";
  }

  static const char* value(const ::practice::send_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::practice::send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string message1\n\
string message2\n\
";
  }

  static const char* value(const ::practice::send_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::practice::send_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message1);
      stream.next(m.message2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct send_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::practice::send_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::practice::send_<ContainerAllocator>& v)
  {
    s << indent << "message1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message1);
    s << indent << "message2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRACTICE_MESSAGE_SEND_H
